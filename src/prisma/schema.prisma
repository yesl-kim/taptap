datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  tasks         Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    String     @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt DateTime   @updatedAt
  title       String
  tasks   Task[]

  owner  String
  user User @relation(fields: [owner], references: [email])

  @@unique([owner, title])
}

model Task {
  id    String     @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime @updatedAt
  title     String
  color     String
  // description String?
  repeat     Repeat[]
  records   Record[]

  categoryId String
  category  Category  @relation(fields: [categoryId], references: [id])

  userId    String
  user      User      @relation(fields: [userId], references: [id])
}

model Record {
  id    String     @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime @updatedAt
  start     DateTime
  end     DateTime

  taskId  String
  task  Task  @relation(fields: [taskId], references: [id])
}

enum RepeatType {
  Daily
  Weekly
  Monthly
  Yearly
}

model Repeat {
  id    String     @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime @updatedAt
  
  startDate DateTime  @default(now())
  endDate DateTime?
  times    Json?     // { start: string, end: string }[] format: hh:mm (24hours)
  
  type  RepeatType? // None = 반복안함
  interval  Int? // 주기
  months  Int[]
  daysOfMonth Int[] // 몇일 1 ~ 31
  weekOfMonth Int? // 몇째주
  daysOfWeek Int[] // 몇요일 sun(0) to sat(6)

  taskId  String
  task  Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}